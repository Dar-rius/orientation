// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Conseiller {
  id          Int    @id @default(autoincrement())
  nom         String @db.Char(15)
  prenom      String @db.Char(15)
  genre       String @db.Char(10)
  email       String @unique
  telephone   String @unique @db.Char(15)
  description String @db.Char(100)
}

model Discussion {
  id        Int      @id @default(autoincrement())
  subject   String   @db.Char(30)
  topic     String   @db.Char(100)
  createdAt DateTime @default(now())
  pathImage String?
}

model Info_domaine {
  id          Int           @id @default(autoincrement())
  nom         String        @db.Char(20)
  resume      String        @db.Char(100)
  description String        @db.Char(250)
  Ecole       Info_ecole[]
  Metier      Info_metier[]
  pathImage   String?
}

model Info_metier {
  id         Int          @id @default(autoincrement())
  nom        String       @db.Char(20)
  resume     String       @db.Char(200)
  domaine    Info_domaine @relation(fields: [id_domaine], references: [id])
  id_domaine Int
}

model Info_ecole {
  id         Int          @id @default(autoincrement())
  nom        String       @db.Char(15)
  adresse    String       @db.Char(30)
  site       String
  domaine    Info_domaine @relation(fields: [id_domaine], references: [id])
  id_domaine Int
}

model Questionnaire {
  id                Int    @id @default(autoincrement())
  serie_bac         String @db.Char(10)
  mention           String @db.Char(10)
  nom_mat_meilleur  String @db.Char(15)
  note_mat_meilleur Int
  nom_mat_mauvaise  String @db.Char(15)
  note_mat_mauvaise Int
  passion           String
  carriere_futur    String
  objectif_vie      String
  hobby             String
  domaine_interesse String
  soutien           String
  infos_sup         String @db.Char(200)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
